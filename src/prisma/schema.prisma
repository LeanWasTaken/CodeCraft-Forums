generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the model for countries
model Countries {
  id   String @id @default(uuid()) @db.VarChar(40)
  name String @unique @db.VarChar(100)

  // Define a relation to users
  users Users[]
}

model Users {
  id              String         @id @default(uuid()) @db.VarChar(40)
  email           String         @unique @db.VarChar(64)
  full_name       String?        @db.VarChar(50)
  password        String         @db.VarChar(128)
  country         Countries?       @relation(fields: [countryId], references: [id])
  countryId       String?        @db.VarChar(40)
  date_registered DateTime       @default(now()) @db.DateTime(0)
  UserProgress    UserProgress[]
  UserReward      UserReward[]
}

// Define the model for languages
model Languages {
  id          String   @id @default(uuid()) @db.VarChar(40)
  name        String   @unique @db.VarChar(50)
  description String?  @db.VarChar(255)
  icon        String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.DateTime(0)

  // Define a relation to courses
  courses Courses[]
}

// Define the model for courses/lessons
model Courses {
  id          String   @id @default(uuid()) @db.VarChar(40)
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(255)
  difficulty  Int      @db.Int
  language    Languages @relation(fields: [languageId], references: [id])
  languageId  String   @db.VarChar(40)

  // Define a relation to units
  units        Units[]
  UserProgress UserProgress[]
}

// Define the model for units
model Units {
  id          String  @id @default(uuid()) @db.VarChar(40)
  name        String  @db.VarChar(100)
  description String? @db.VarChar(255)
  courseId    String  @db.VarChar(40)
  course      Courses  @relation(fields: [courseId], references: [id])

  // Define a relation to tasks
  tasks        Tasks[]
  UserProgress UserProgress[]
}

// Define the model for tasks/exercises
model Tasks {
  id             String @id @default(uuid()) @db.VarChar(40)
  type           String @db.VarChar(50)
  description    String @db.VarChar(255)
  correctAnswers Json?  @db.Json // Store multiple correct answers as JSON
  unitId         String @db.VarChar(40)
  unit           Units   @relation(fields: [unitId], references: [id])
}

// Define the model for user progress
model UserProgress {
  id                String   @id @default(uuid()) @db.VarChar(40)
  user              Users     @relation(fields: [userId], references: [id])
  userId            String   @db.VarChar(40)
  course            Courses   @relation(fields: [courseId], references: [id])
  courseId          String   @db.VarChar(40)
  unit              Units     @relation(fields: [unitId], references: [id])
  unitId            String   @db.VarChar(40)
  lastCompletedTask String?  @db.VarChar(40)
  score             Int?     @db.Int
  createdAt         DateTime @default(now()) @db.DateTime(0)
}

// Define the model for rewards
model Rewards {
  id          String       @id @default(uuid()) @db.VarChar(40)
  name        String       @db.VarChar(100)
  description String?      @db.VarChar(255)
  cost        Int?         @db.Int
  createdAt   DateTime     @default(now()) @db.DateTime(0)
  UserReward  UserReward[]
}

// Define the model for user rewards
model UserReward {
  id        String   @id @default(uuid()) @db.VarChar(40)
  user      Users     @relation(fields: [userId], references: [id])
  userId    String   @db.VarChar(40)
  reward    Rewards   @relation(fields: [rewardId], references: [id])
  rewardId  String   @db.VarChar(40)
  status    String   @db.VarChar(20) // e.g., redeemed or not
  createdAt DateTime @default(now()) @db.DateTime(0)
}
