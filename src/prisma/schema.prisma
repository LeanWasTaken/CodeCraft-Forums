generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                                   String      @id @default(uuid())
  fullname                             String
  username                             String      @unique
  bio                                  String      @default("")
  avatar_url                           String      @default("")
  banner_url                           String      @default("")
  email                                String      @unique
  password                             String
  lang                                 String      @default("en")
  createdAt                            DateTime    @default(now())
  comments                             Comments[]
  Following_Following_followerToUsers  Following[] @relation("Following_followerToUsers")
  Following_Following_followingToUsers Following[] @relation("Following_followingToUsers")
  posts                                Posts[]
}

model Topics {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  posts     Posts[]
}

model Posts {
  id        String     @id @default(uuid())
  title     String     @db.VarChar(100)
  content   String     @db.VarChar(10000)
  type      PostType
  createdAt DateTime   @default(now())
  authorId  String
  topicId   String
  comments  Comments[]
  author    Users      @relation(fields: [authorId], references: [id])
  topic     Topics     @relation(fields: [topicId], references: [id])

  @@index([authorId], map: "Posts_authorId_fkey")
  @@index([topicId], map: "Posts_topicId_fkey")
}

model Comments {
  id        String      @id @default(uuid())
  content   String
  type      CommentType
  createdAt DateTime    @default(now())
  authorId  String
  postId    String
  parentId  String?
  author    Users       @relation(fields: [authorId], references: [id])
  parent    Comments?   @relation("ReplyTo", fields: [parentId], references: [id])
  replies   Comments[]  @relation("ReplyTo")
  post      Posts       @relation(fields: [postId], references: [id])

  @@index([authorId], map: "Comments_authorId_fkey")
  @@index([parentId], map: "Comments_parentId_fkey")
  @@index([postId], map: "Comments_postId_fkey")
}

model Following {
  ID               String           @id @default(uuid())
  follower         String
  following        String
  status           Following_status @default(waiting)
  followedAt       DateTime         @default(now()) @db.DateTime(0)
  followerToUsers  Users            @relation("Following_followerToUsers", fields: [follower], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Following_ibfk_1")
  followingToUsers Users            @relation("Following_followingToUsers", fields: [following], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Following_ibfk_2")

  @@index([follower, following], map: "follower")
  @@index([following], map: "following")
}

enum PostType {
  TEXT
  IMAGE
  CODE
  TEXT_WITH_IMAGE
  TEXT_WITH_CODE
}

enum CommentType {
  TEXT
  IMAGE
  CODE
}

enum Following_status {
  waiting
  approved
}
